{"version":3,"sources":["App.js","index.js"],"names":["App","Ref","useRef","useState","timer","setTimer","startTimer","e","total","Date","parse","seconds","Math","floor","minutes","hours","getTimeRemaining","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","useEffect","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKA6FeA,EA1FH,WAKX,IAAMC,EAAMC,iBAAO,MAGnB,EAA0BC,mBAAS,YAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcMC,EAAa,SAACC,GACnB,MAZwB,SAACA,GACzB,IAAMC,EAAQC,KAAKC,MAAMH,GAAKE,KAAKC,MAAM,IAAID,MACvCE,EAAUC,KAAKC,MAAOL,EAAQ,IAAQ,IACtCM,EAAUF,KAAKC,MAAOL,EAAQ,IAAO,GAAM,IAEjD,MAAO,CACNA,QAAOO,MAFMH,KAAKC,MAAOL,EAAQ,IAAO,GAAK,GAAM,IAErCM,UAASH,WAOnBK,CAAiBT,GADhBC,EAAN,EAAMA,MAAOO,EAAb,EAAaA,MAAOD,EAApB,EAAoBA,QAASH,EAA7B,EAA6BA,QAEzBH,GAAS,GAKZH,GACEU,EAAQ,EAAIA,EAAQ,IAAMA,GAAS,KACnCD,EAAU,EAAIA,EAAU,IAAMA,GAAW,KACvCH,EAAU,EAAIA,EAAU,IAAMA,KAM9BM,EAAa,SAACV,GAKnBF,EAAS,YAKLJ,EAAIiB,SAASC,cAAclB,EAAIiB,SACnC,IAAME,EAAKC,aAAY,WACtBf,EAAWC,KACT,KACHN,EAAIiB,QAAUE,GAGTE,EAAc,WACnB,IAAIC,EAAW,IAAId,KAKnB,OADAc,EAASC,WAAWD,EAASE,aAAe,IACrCF,GAQRG,qBAAU,WACTT,EAAWK,OACT,IAUH,OACC,sBAAKK,UAAU,MAAf,UACC,6BAAKvB,IACL,wBAAQwB,QAPW,WACpBX,EAAWK,MAMV,uBCnFHO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.675cbe4f.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\n\n\nconst App = () => {\n\n\t// We need ref in this, because we are dealing\n\t// with JS setInterval to keep track of it and\n\t// stop it when needed\n\tconst Ref = useRef(null);\n\n\t// The state for our timer\n\tconst [timer, setTimer] = useState('00:00:00');\n\n\n\tconst getTimeRemaining = (e) => {\n\t\tconst total = Date.parse(e) - Date.parse(new Date());\n\t\tconst seconds = Math.floor((total / 1000) % 60);\n\t\tconst minutes = Math.floor((total / 1000 / 60) % 60);\n\t\tconst hours = Math.floor((total / 1000 * 60 * 60) % 24);\n\t\treturn {\n\t\t\ttotal, hours, minutes, seconds\n\t\t};\n\t}\n\n\n\tconst startTimer = (e) => {\n\t\tlet { total, hours, minutes, seconds }\n\t\t\t\t\t= getTimeRemaining(e);\n\t\tif (total >= 0) {\n\n\t\t\t// update the timer\n\t\t\t// check if less than 10 then we need to\n\t\t\t// add '0' at the begining of the variable\n\t\t\tsetTimer(\n\t\t\t\t(hours > 9 ? hours : '0' + hours) + ':' +\n\t\t\t\t(minutes > 9 ? minutes : '0' + minutes) + ':'\n\t\t\t\t+ (seconds > 9 ? seconds : '0' + seconds)\n\t\t\t)\n\t\t}\n\t}\n\n\n\tconst clearTimer = (e) => {\n\n\t\t// If you adjust it you should also need to\n\t\t// adjust the Endtime formula we are about\n\t\t// to code next\t\n\t\tsetTimer('00:00:10');\n\n\t\t// If you try to remove this line the\n\t\t// updating of timer Variable will be\n\t\t// after 1000ms or 1sec\n\t\tif (Ref.current) clearInterval(Ref.current);\n\t\tconst id = setInterval(() => {\n\t\t\tstartTimer(e);\n\t\t}, 1000)\n\t\tRef.current = id;\n\t}\n\n\tconst getDeadTime = () => {\n\t\tlet deadline = new Date();\n\n\t\t// This is where you need to adjust if\n\t\t// you entend to add more time\n\t\tdeadline.setSeconds(deadline.getSeconds() + 10);\n\t\treturn deadline;\n\t}\n\n\t// We can use useEffect so that when the component\n\t// mount the timer will start as soon as possible\n\n\t// We put empty array to act as componentDid\n\t// mount only\n\tuseEffect(() => {\n\t\tclearTimer(getDeadTime());\n\t}, []);\n\n\t// Another way to call the clearTimer() to start\n\t// the countdown is via action event from the\n\t// button first we create function to be called\n\t// by the button\n\tconst onClickReset = () => {\n\t\tclearTimer(getDeadTime());\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h2>{timer}</h2>\n\t\t\t<button onClick={onClickReset}>Reset</button>\n\t\t</div>\n\t)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}